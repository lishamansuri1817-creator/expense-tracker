<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Modern Finance Tracker</title>
    <style>
        :root {
            --primary: #4361ee;
            --secondary: #3f37c9;
            --accent: #4895ef;
            --light: #f8f9fa;
            --dark: #212529;
            --success: #4cc9f0;
            --danger: #f72585;
            --warning: #f8961e;
            --info: #560bad;
            --border-radius: 12px;
            --box-shadow: 0 8px 20px rgba(0, 0, 0, 0.12);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: #f5f7fa;
            color: var(--dark);
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
        }

        .logo {
            font-size: 28px;
            font-weight: 700;
            color: var(--primary);
        }

        .logo span {
            color: var(--accent);
        }

        .balance-card {
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            color: white;
            padding: 25px;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            margin-bottom: 30px;
            transition: transform 0.3s ease;
        }

        .balance-card:hover {
            transform: translateY(-5px);
        }

        .balance-title {
            font-size: 16px;
            opacity: 0.9;
            margin-bottom: 10px;
        }

        .balance-amount {
            font-size: 36px;
            font-weight: 700;
            margin-bottom: 15px;
        }

        .balance-stats {
            display: flex;
            justify-content: space-between;
        }

        .income, .expense {
            display: flex;
            flex-direction: column;
        }

        .income span:first-child, .expense span:first-child {
            font-size: 14px;
            opacity: 0.9;
        }

        .income span:last-child {
            color: #a7f3d0;
            font-weight: 600;
        }

        .expense span:last-child {
            color: #fca5a5;
            font-weight: 600;
        }

        .main-content {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
        }

        @media (max-width: 768px) {
            .main-content {
                grid-template-columns: 1fr;
            }
        }

        .card {
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            padding: 25px;
            transition: transform 0.3s ease;
        }

        .card:hover {
            transform: translateY(-5px);
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .card-title {
            font-size: 20px;
            font-weight: 600;
            color: var(--dark);
        }

        .btn {
            padding: 8px 16px;
            border: none;
            border-radius: 6px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-primary {
            background-color: var(--primary);
            color: white;
        }

        .btn-primary:hover {
            background-color: var(--secondary);
        }

        .btn-danger {
            background-color: var(--danger);
            color: white;
        }

        .btn-danger:hover {
            background-color: #d1145a;
        }

        .transaction-form input, .transaction-form select {
            width: 100%;
            padding: 12px;
            margin-bottom: 15px;
            border: 1px solid #e2e8f0;
            border-radius: 6px;
            font-size: 14px;
            transition: border 0.3s ease;
        }

        .transaction-form input:focus, .transaction-form select:focus {
            outline: none;
            border-color: var(--accent);
        }

        .transaction-list {
            list-style: none;
        }

        .transaction-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 0;
            border-bottom: 1px solid #f1f1f1;
        }

        .transaction-item:last-child {
            border-bottom: none;
        }

        .transaction-info {
            display: flex;
            align-items: center;
        }

        .transaction-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 15px;
            color: white;
            font-size: 18px;
        }

        .income-icon {
            background-color: var(--success);
        }

        .expense-icon {
            background-color: var(--danger);
        }

        .transaction-details h4 {
            font-size: 16px;
            margin-bottom: 5px;
        }

        .transaction-details p {
            font-size: 13px;
            color: #64748b;
        }

        .transaction-amount {
            font-weight: 600;
        }

        .income-amount {
            color: var(--success);
        }

        .expense-amount {
            color: var(--danger);
        }

        .delete-btn {
            background: none;
            border: none;
            color: #94a3b8;
            cursor: pointer;
            font-size: 18px;
            transition: color 0.3s ease;
        }

        .delete-btn:hover {
            color: var(--danger);
        }

        .chart-container {
            height: 300px;
            margin-top: 20px;
        }

        .summary-item {
            display: flex;
            justify-content: space-between;
            padding: 12px 0;
            border-bottom: 1px solid #f1f1f1;
        }

        .summary-item:last-child {
            border-bottom: none;
        }

        .summary-label {
            font-weight: 500;
            color: #64748b;
        }

        .summary-value {
            font-weight: 600;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            justify-content: center;
            align-items: center;
        }

        .modal-content {
            background-color: white;
            padding: 30px;
            border-radius: var(--border-radius);
            width: 90%;
            max-width: 500px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .modal-title {
            font-size: 22px;
            font-weight: 600;
        }

        .close-btn {
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: #64748b;
        }

        .modal-footer {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
            margin-top: 20px;
        }

        .tabs {
            display: flex;
            margin-bottom: 20px;
            border-bottom: 1px solid #e2e8f0;
        }

        .tab {
            padding: 10px 20px;
            cursor: pointer;
            font-weight: 500;
            color: #64748b;
            border-bottom: 2px solid transparent;
            transition: all 0.3s ease;
        }

        .tab.active {
            color: var(--primary);
            border-bottom: 2px solid var(--primary);
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <div class="logo">Finance<span>Track</span></div>
            <div id="current-date"></div>
        </header>

        <div class="balance-card">
            <div class="balance-title">Total Balance</div>
            <div class="balance-amount" id="total-balance">₹0.00</div>
            <div class="balance-stats">
                <div class="income">
                    <span>Income</span>
                    <span id="total-income">₹0.00</span>
                </div>
                <div class="expense">
                    <span>Expense</span>
                    <span id="total-expense">₹0.00</span>
                </div>
            </div>
        </div>

        <div class="main-content">
            <div class="card">
                <div class="card-header">
                    <div class="card-title">Transactions</div>
                    <button class="btn btn-primary" id="add-transaction-btn">Add Transaction</button>
                </div>
                
                <div class="tabs">
                    <div class="tab active" data-tab="all">All</div>
                    <div class="tab" data-tab="income">Income</div>
                    <div class="tab" data-tab="expense">Expense</div>
                </div>
                
                <ul class="transaction-list" id="transaction-list">
                    <!-- Transactions will be added here dynamically -->
                </ul>
            </div>

            <div class="card">
                <div class="card-header">
                    <div class="card-title">Financial Summary</div>
                </div>
                <div class="chart-container" id="chart-container">
                    <!-- Chart will be rendered here -->
                    <canvas id="finance-chart"></canvas>
                </div>
                <div class="summary-list">
                    <div class="summary-item">
                        <span class="summary-label">Total Transactions:</span>
                        <span class="summary-value" id="total-transactions">0</span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-label">Highest Income:</span>
                        <span class="summary-value" id="highest-income">₹0.00</span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-label">Highest Expense:</span>
                        <span class="summary-value" id="highest-expense">₹0.00</span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-label">Savings Rate:</span>
                        <span class="summary-value" id="savings-rate">0%</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Transaction Modal -->
    <div class="modal" id="transaction-modal">
        <div class="modal-content">
            <div class="modal-header">
                <div class="modal-title">Add New Transaction</div>
                <button class="close-btn" id="close-modal">&times;</button>
            </div>
            <form class="transaction-form" id="transaction-form">
                <div>
                    <label for="transaction-type">Type</label>
                    <select id="transaction-type" required>
                        <option value="">Select type</option>
                        <option value="income">Income</option>
                        <option value="expense">Expense</option>
                    </select>
                </div>
                <div>
                    <label for="transaction-category">Category</label>
                    <select id="transaction-category" required>
                        <option value="">Select category</option>
                        <!-- Categories will be added dynamically -->
                    </select>
                </div>
                <div>
                    <label for="transaction-amount">Amount</label>
                    <input type="number" id="transaction-amount" placeholder="0.00" step="0.01" required>
                </div>
                <div>
                    <label for="transaction-description">Description</label>
                    <input type="text" id="transaction-description" placeholder="Enter description">
                </div>
                <div>
                    <label for="transaction-date">Date</label>
                    <input type="date" id="transaction-date" required>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" id="cancel-transaction">Cancel</button>
                    <button type="submit" class="btn btn-primary">Add Transaction</button>
                </div>
            </form>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // DOM Elements
        const addTransactionBtn = document.getElementById('add-transaction-btn');
        const transactionModal = document.getElementById('transaction-modal');
        const closeModalBtn = document.getElementById('close-modal');
        const cancelTransactionBtn = document.getElementById('cancel-transaction');
        const transactionForm = document.getElementById('transaction-form');
        const transactionList = document.getElementById('transaction-list');
        const tabs = document.querySelectorAll('.tab');
        
        // Financial elements
        const totalBalanceEl = document.getElementById('total-balance');
        const totalIncomeEl = document.getElementById('total-income');
        const totalExpenseEl = document.getElementById('total-expense');
        const totalTransactionsEl = document.getElementById('total-transactions');
        const highestIncomeEl = document.getElementById('highest-income');
        const highestExpenseEl = document.getElementById('highest-expense');
        const savingsRateEl = document.getElementById('savings-rate');
        
        // Form elements
        const transactionTypeEl = document.getElementById('transaction-type');
        const transactionCategoryEl = document.getElementById('transaction-category');
        const transactionAmountEl = document.getElementById('transaction-amount');
        const transactionDescriptionEl = document.getElementById('transaction-description');
        const transactionDateEl = document.getElementById('transaction-date');
        
        // Chart
        let financeChart;
        
        // Categories
        const categories = {
            income: ['Salary', 'Freelance', 'Investments', 'Gifts', 'Other Income'],
            expense: ['Food', 'Transportation', 'Housing', 'Entertainment', 'Healthcare', 'Education', 'Shopping', 'Other Expense']
        };
        
        // Sample data (in a real app, this would come from a database)
        let transactions = [
            { id: 1, type: 'income', category: 'Salary', amount: 50000, description: 'Monthly salary', date: '2023-05-01' },
            { id: 2, type: 'expense', category: 'Housing', amount: 15000, description: 'Rent payment', date: '2023-05-01' },
            { id: 3, type: 'expense', category: 'Food', amount: 8000, description: 'Groceries', date: '2023-05-03' },
            { id: 4, type: 'expense', category: 'Transportation', amount: 3000, description: 'Petrol and parking', date: '2023-05-05' },
            { id: 5, type: 'income', category: 'Freelance', amount: 12000, description: 'Web design project', date: '2023-05-10' },
            { id: 6, type: 'expense', category: 'Entertainment', amount: 2500, description: 'Movie tickets', date: '2023-05-12' }
        ];
        
        // Initialize the app
        function init() {
            displayCurrentDate();
            renderTransactionList();
            updateSummary();
            setupEventListeners();
            updateCategoryOptions();
        }
        
        // Display current date
        function displayCurrentDate() {
            const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
            const today = new Date();
            document.getElementById('current-date').textContent = today.toLocaleDateString('en-US', options);
            
            // Set default date in form to today
            transactionDateEl.valueAsDate = today;
        }
        
        // Setup event listeners
        function setupEventListeners() {
            // Modal controls
            addTransactionBtn.addEventListener('click', () => transactionModal.style.display = 'flex');
            closeModalBtn.addEventListener('click', () => transactionModal.style.display = 'none');
            cancelTransactionBtn.addEventListener('click', () => transactionModal.style.display = 'none');
            
            // Form submission
            transactionForm.addEventListener('submit', handleFormSubmit);
            
            // Transaction type change
            transactionTypeEl.addEventListener('change', updateCategoryOptions);
            
            // Tab switching
            tabs.forEach(tab => {
                tab.addEventListener('click', () => {
                    tabs.forEach(t => t.classList.remove('active'));
                    tab.classList.add('active');
                    renderTransactionList(tab.dataset.tab);
                });
            });
            
            // Close modal when clicking outside
            window.addEventListener('click', (e) => {
                if (e.target === transactionModal) {
                    transactionModal.style.display = 'none';
                }
            });
        }
        
        // Update category options based on selected type
        function updateCategoryOptions() {
            const type = transactionTypeEl.value;
            transactionCategoryEl.innerHTML = '<option value="">Select category</option>';
            
            if (type) {
                categories[type].forEach(category => {
                    const option = document.createElement('option');
                    option.value = category;
                    option.textContent = category;
                    transactionCategoryEl.appendChild(option);
                });
            }
        }
        
        // Handle form submission
        function handleFormSubmit(e) {
            e.preventDefault();
            
            const newTransaction = {
                id: Date.now(),
                type: transactionTypeEl.value,
                category: transactionCategoryEl.value,
                amount: parseFloat(transactionAmountEl.value),
                description: transactionDescriptionEl.value,
                date: transactionDateEl.value
            };
            
            transactions.push(newTransaction);
            renderTransactionList();
            updateSummary();
            
            // Reset form and close modal
            transactionForm.reset();
            transactionModal.style.display = 'none';
            transactionDateEl.valueAsDate = new Date();
        }
        
        // Render transaction list
        function renderTransactionList(filter = 'all') {
            transactionList.innerHTML = '';
            
            let filteredTransactions = transactions;
            
            if (filter === 'income') {
                filteredTransactions = transactions.filter(t => t.type === 'income');
            } else if (filter === 'expense') {
                filteredTransactions = transactions.filter(t => t.type === 'expense');
            }
            
            // Sort by date (newest first)
            filteredTransactions.sort((a, b) => new Date(b.date) - new Date(a.date));
            
            if (filteredTransactions.length === 0) {
                transactionList.innerHTML = '<p style="text-align: center; padding: 20px; color: #64748b;">No transactions found</p>';
                return;
            }
            
            filteredTransactions.forEach(transaction => {
                const transactionItem = document.createElement('li');
                transactionItem.className = 'transaction-item';
                transactionItem.dataset.id = transaction.id;
                
                const iconClass = transaction.type === 'income' ? 'income-icon' : 'expense-icon';
                const iconSymbol = transaction.type === 'income' ? '↑' : '↓';
                const amountClass = transaction.type === 'income' ? 'income-amount' : 'expense-amount';
                
                transactionItem.innerHTML = `
                    <div class="transaction-info">
                        <div class="transaction-icon ${iconClass}">${iconSymbol}</div>
                        <div class="transaction-details">
                            <h4>${transaction.category}</h4>
                            <p>${transaction.description || 'No description'} • ${formatDate(transaction.date)}</p>
                        </div>
                    </div>
                    <div class="transaction-amount ${amountClass}">
                        ${transaction.type === 'income' ? '+' : '-'}₹${transaction.amount.toFixed(2)}
                    </div>
                    <button class="delete-btn" data-id="${transaction.id}">×</button>
                `;
                
                transactionList.appendChild(transactionItem);
            });
            
            // Add event listeners to delete buttons
            document.querySelectorAll('.delete-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const id = parseInt(e.target.dataset.id);
                    transactions = transactions.filter(t => t.id !== id);
                    renderTransactionList();
                    updateSummary();
                });
            });
        }
        
        // Update summary information
        function updateSummary() {
            // Calculate totals
            const incomes = transactions.filter(t => t.type === 'income');
            const expenses = transactions.filter(t => t.type === 'expense');
            
            const totalIncome = incomes.reduce((sum, t) => sum + t.amount, 0);
            const totalExpense = expenses.reduce((sum, t) => sum + t.amount, 0);
            const balance = totalIncome - totalExpense;
            
            // Find highest income and expense
            const highestIncome = incomes.length > 0 ? Math.max(...incomes.map(t => t.amount)) : 0;
            const highestExpense = expenses.length > 0 ? Math.max(...expenses.map(t => t.amount)) : 0;
            
            // Calculate savings rate
            const savingsRate = totalIncome > 0 ? ((totalIncome - totalExpense) / totalIncome * 100) : 0;
            
            // Update DOM
            totalBalanceEl.textContent = `₹${balance.toFixed(2)}`;
            totalIncomeEl.textContent = `₹${totalIncome.toFixed(2)}`;
            totalExpenseEl.textContent = `₹${totalExpense.toFixed(2)}`;
            totalTransactionsEl.textContent = transactions.length;
            highestIncomeEl.textContent = `₹${highestIncome.toFixed(2)}`;
            highestExpenseEl.textContent = `₹${highestExpense.toFixed(2)}`;
            savingsRateEl.textContent = `${savingsRate.toFixed(1)}%`;
            
            // Update chart
            updateChart(totalIncome, totalExpense);
        }
        
        // Update the chart
        function updateChart(totalIncome, totalExpense) {
            const ctx = document.getElementById('finance-chart').getContext('2d');
            
            // Destroy previous chart if it exists
            if (financeChart) {
                financeChart.destroy();
            }
            
            financeChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: ['Income', 'Expense'],
                    datasets: [{
                        data: [totalIncome, totalExpense],
                        backgroundColor: [
                            '#4cc9f0',
                            '#f72585'
                        ],
                        borderColor: [
                            '#fff',
                            '#fff'
                        ],
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom',
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return `${context.label}: ₹${context.raw.toFixed(2)}`;
                                }
                            }
                        }
                    },
                    cutout: '70%'
                }
            });
        }
        
        // Format date for display
        function formatDate(dateString) {
            const options = { month: 'short', day: 'numeric' };
            return new Date(dateString).toLocaleDateString('en-US', options);
        }
        
        // Initialize the app when DOM is loaded
        document.addEventListener('DOMContentLoaded', init);
    </script>
</body>
</html>0
